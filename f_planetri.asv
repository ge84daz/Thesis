%__________________________________________________________________________
%
%        f_planetri.m    
%
%       INPUT: 
%       ey = [y1 y2 y3]         element coordinates
%       ez = [z1 z2 z3]
%       ep = [ptype t ]         ptype: analysis type
%                               t: thickness
%       D                       constitutive matrix
%
%       eq = [bx;               bx: body force x-dir
%             by]               by: body force y-dir
%       
%       OUTPUT: 
%       Ke : element stiffness matrix (9 x 9)
%
%       DESCRIPTION: 
%       The function calculates the stiffness matrix of a three-node plane
%       stress or strain element within the image space
%
%       REMARK: 
%       Original Author: Manuela Hackenberg (planqe.m)
%       Modified:   Tom Hicks           (f_planequad.m)            
%       Date:       21-09-2023 
%       Changed:    21-09-2023 - Hicks 

%       Modified:   Anton Boenisch      (f_planetri.m)           
%       Date:       04-09-2025 
%       Changed:    04-09-2025 - Boenisch   
%__________________________________________________________________________

  
function Ke = f_planetri(ey,ez,ep,ngp,wgaus,zeta,eta,Kx,Omega,D1,rho1)

ptype   = ep(1);
d       = ep(2);

bx      = 0; 
by      = 0.; 
if nargin==10  
    bx  =   eq(1); 
    by   =  eq(2); 
end
                                                                            %> modified Boenisch
N=zeros(ngp,3); % shape functions - Zienkiewicz: The Finite Element Method: Its Basis and Fundamentals eq. 6.51
N(:,1) = 0.25 * (1 - zeta) .* (1 - eta);      % N1 
N(:,2) = 0.25 * (1 + zeta) .* (1 - eta);      % N2 
N(:,3) = 0.50 * (1 + eta);                    % N3 

NMe=zeros(9,9);

r2 = 2 * ngp;                                                               
dNr = zeros(r2, 3);             %matrix with derivatives in 8 (2*ngausspoints) x 3 (three shape functions)
% d/dξ derivatives (rows 1,3,5,...):
dNr(1:2:r2, 1) = -(1 - eta) / 4;
dNr(1:2:r2, 2) =  (1 - eta) / 4;
dNr(1:2:r2, 3) =  0;
% d/dη derivatives (rows 2,4,6,...):
dNr(2:2:r2, 1) = -(1 - zeta) / 4;
dNr(2:2:r2, 2) = -(1 + zeta) / 4;
dNr(2:2:r2, 3) =  1/2;
                                                                            
% set ey, ez from 4 entries to 3 because 3.=4.
ey = ey(:).';  ez = ez(:).';        % row vector
if numel(ey) == 4
    ey = ey(1:3);
    ez = ez(1:3);
end

coords = [ey; ez]';   % -> 3×2
J = dNr * coords;     % -> 8x3 * 3x2 ok


Ke=complex(zeros(9,9));
Me=complex(zeros(9,9));

for s=1:ngp
    detJ=det(J((s*2-1):s*2,:));
    dNyz=J((s*2-1):s*2,:)\dNr((s*2-1):s*2,:);
    dNx=complex(zeros(1,ngp)); % predefinition
    dNx=1i*Kx*N(s,:);
    
                                                                             
    B=complex(zeros(6,9));  %3 nodes and 3 nodes * 3 DOF = 9columns
    for t =1:3 %loop for 3 nodes
       B(1, 3*t-2) = dNx(t);           % ∂/∂x term (using dNx = i*Kx*N)
       B(2, 3*t-1) = dNyz(1,t);        % ∂/∂y term
       B(3, 3*t)   = dNyz(2,t);        % ∂/∂z term
       B(4, 3*t-2) = dNyz(1,t);        % γ_xy: ∂/∂y in u-direction
       B(4, 3*t-1) = dNx(t);           % γ_xy: ∂/∂x in v-direction
       B(5, 3*t-1) = dNyz(2,t);        % γ_yz: ∂/∂z in v-direction
       B(5, 3*t)   = dNyz(1,t);        % γ_yz: ∂/∂y in w-direction
       B(6, 3*t-2) = dNyz(2,t);        % γ_zx: ∂/∂z in u-direction
       B(6, 3*t)   = dNx(t);           % γ_zx: ∂/∂x in w-direction
    end
    
  Ke=Ke+B'*D1*B*detJ*wgaus(s)*d;
  
  nel = length(ey);  %nel = 3 nodes
  NMe(s*3-2, 1:3:3*nel) = N(s,:);   
  NMe(s*3-1, 2:3:3*nel) = N(s,:);
  NMe(s*3,   3:3:3*nel) = N(s,:);


  Me=Me+NMe((s*3-2):s*3,:)'*rho1*NMe((s*3-2):s*3,:)*detJ*wgaus(s)*d;       
                                                                            %< modified Boenisch
    
  
end 

%% Output
Ke=Ke-Omega^2*Me;


end